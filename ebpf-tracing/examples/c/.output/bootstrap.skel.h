/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __BOOTSTRAP_BPF_SKEL_H__
#define __BOOTSTRAP_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct bootstrap_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *exec_start;
		struct bpf_map *rb;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *xdp_pass;
	} progs;
	struct {
		struct bpf_link *xdp_pass;
	} links;
	struct bootstrap_bpf__rodata {
		long long unsigned int min_duration_ns;
	} *rodata;

#ifdef __cplusplus
	static inline struct bootstrap_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct bootstrap_bpf *open_and_load();
	static inline int load(struct bootstrap_bpf *skel);
	static inline int attach(struct bootstrap_bpf *skel);
	static inline void detach(struct bootstrap_bpf *skel);
	static inline void destroy(struct bootstrap_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
bootstrap_bpf__destroy(struct bootstrap_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
bootstrap_bpf__create_skeleton(struct bootstrap_bpf *obj);

static inline struct bootstrap_bpf *
bootstrap_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct bootstrap_bpf *obj;
	int err;

	obj = (struct bootstrap_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = bootstrap_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	bootstrap_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct bootstrap_bpf *
bootstrap_bpf__open(void)
{
	return bootstrap_bpf__open_opts(NULL);
}

static inline int
bootstrap_bpf__load(struct bootstrap_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct bootstrap_bpf *
bootstrap_bpf__open_and_load(void)
{
	struct bootstrap_bpf *obj;
	int err;

	obj = bootstrap_bpf__open();
	if (!obj)
		return NULL;
	err = bootstrap_bpf__load(obj);
	if (err) {
		bootstrap_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
bootstrap_bpf__attach(struct bootstrap_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
bootstrap_bpf__detach(struct bootstrap_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *bootstrap_bpf__elf_bytes(size_t *sz);

static inline int
bootstrap_bpf__create_skeleton(struct bootstrap_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "bootstrap_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "exec_start";
	s->maps[0].map = &obj->maps.exec_start;

	s->maps[1].name = "rb";
	s->maps[1].map = &obj->maps.rb;

	s->maps[2].name = "bootstra.rodata";
	s->maps[2].map = &obj->maps.rodata;
	s->maps[2].mmaped = (void **)&obj->rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_pass";
	s->progs[0].prog = &obj->progs.xdp_pass;
	s->progs[0].link = &obj->links.xdp_pass;

	s->data = bootstrap_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *bootstrap_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x90\x07\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0a\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x78\x64\
\x70\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x6d\x61\
\x70\x73\0\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2e\x62\x70\x66\x2e\x63\0\x78\
\x64\x70\x5f\x70\x61\x73\x73\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x4c\x49\x43\x45\
\x4e\x53\x45\0\x65\x78\x65\x63\x5f\x73\x74\x61\x72\x74\0\x6d\x69\x6e\x5f\x64\
\x75\x72\x61\x74\x69\x6f\x6e\x5f\x6e\x73\0\x72\x62\0\x78\x64\x70\x5f\x70\x61\
\x73\x73\0\x2e\x72\x65\x6c\x78\x64\x70\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\
\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x2b\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3b\0\0\0\x01\0\x05\0\
\x08\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4c\0\0\0\x11\0\
\x04\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x54\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\x5f\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x6f\
\0\0\0\x11\0\x06\0\x20\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x72\0\0\0\x12\0\x03\0\0\
\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x18\x01\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\
\0\0\x0e\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\x44\
\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\x70\x61\
\x63\x6b\x65\x74\x20\x73\x69\x7a\x65\x3a\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x04\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x18\x03\0\0\x18\x03\
\0\0\x9f\x01\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\x06\
\0\0\0\x06\0\0\0\x40\0\0\0\x12\0\0\0\x08\0\0\0\x80\0\0\0\x16\0\0\0\x0b\0\0\0\
\xc0\0\0\0\0\0\0\0\0\0\0\x02\x04\0\0\0\x1c\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\
\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x01\0\0\0\x20\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x07\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\x03\0\0\0\x05\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x34\0\0\0\0\0\0\x08\
\x0a\0\0\0\x3a\0\0\0\0\0\0\x08\x03\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x49\0\0\0\
\0\0\0\x08\x0d\0\0\0\x4d\0\0\0\0\0\0\x08\x0e\0\0\0\x53\0\0\0\0\0\0\x01\x08\0\0\
\0\x40\0\0\0\x6a\0\0\0\0\0\0\x0e\x01\0\0\0\x01\0\0\0\0\0\0\0\x02\0\0\x04\x10\0\
\0\0\x01\0\0\0\x11\0\0\0\0\0\0\0\x06\0\0\0\x13\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\x02\x12\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x1b\0\0\0\0\0\0\0\
\0\0\0\x02\x14\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\0\0\x04\0\
\x75\0\0\0\0\0\0\x0e\x10\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x17\0\0\0\x78\0\0\0\
\x06\0\0\x04\x18\0\0\0\x7f\0\0\0\x18\0\0\0\0\0\0\0\x84\0\0\0\x18\0\0\0\x20\0\0\
\0\x8d\0\0\0\x18\0\0\0\x40\0\0\0\x97\0\0\0\x18\0\0\0\x60\0\0\0\xa7\0\0\0\x18\0\
\0\0\x80\0\0\0\xb6\0\0\0\x18\0\0\0\xa0\0\0\0\xc5\0\0\0\0\0\0\x08\x19\0\0\0\xcb\
\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x03\0\0\0\xd8\0\0\0\
\x16\0\0\0\xdc\0\0\0\x01\0\0\x0c\x1a\0\0\0\xe5\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\
\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x1c\0\0\0\x05\0\0\0\x0d\0\0\0\xea\0\0\0\0\0\0\
\x0e\x1d\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x20\0\0\0\0\0\0\0\0\0\0\x09\x0e\0\0\
\0\xf2\0\0\0\0\0\0\x0e\x1f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x1c\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x22\0\0\0\x05\0\0\0\x0e\0\0\0\x02\x01\0\0\0\0\0\x0e\x23\0\0\
\0\0\0\0\0\x85\x01\0\0\x01\0\0\x0f\x0d\0\0\0\x1e\0\0\0\0\0\0\0\x0d\0\0\0\x8d\
\x01\0\0\x02\0\0\x0f\x16\0\0\0\x21\0\0\0\0\0\0\0\x08\0\0\0\x24\0\0\0\x08\0\0\0\
\x0e\0\0\0\x95\x01\0\0\x02\0\0\x0f\x30\0\0\0\x0f\0\0\0\0\0\0\0\x20\0\0\0\x15\0\
\0\0\x20\0\0\0\x10\0\0\0\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\
\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x69\x6e\x74\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x70\x69\x64\
\x5f\x74\0\x5f\x5f\x6b\x65\x72\x6e\x65\x6c\x5f\x70\x69\x64\x5f\x74\0\x75\x36\
\x34\0\x5f\x5f\x75\x36\x34\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x65\x78\x65\x63\x5f\x73\x74\x61\x72\
\x74\0\x72\x62\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\
\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\
\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\
\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\
\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\
\x74\x78\0\x78\x64\x70\x5f\x70\x61\x73\x73\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\
\x4e\x53\x45\0\x6d\x69\x6e\x5f\x64\x75\x72\x61\x74\x69\x6f\x6e\x5f\x6e\x73\0\
\x78\x64\x70\x5f\x70\x61\x73\x73\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2f\x68\x6f\
\x6d\x65\x2f\x62\x72\x75\x6e\x6f\x2f\x44\x6f\x63\x75\x6d\x65\x6e\x74\x73\x2f\
\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\
\x61\x6d\x70\x6c\x65\x73\x2f\x63\x2f\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2e\
\x62\x70\x66\x2e\x63\0\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x70\
\x61\x63\x6b\x65\x74\x20\x73\x69\x7a\x65\x3a\x20\x22\x29\x3b\0\x09\x72\x65\x74\
\x75\x72\x6e\x20\x58\x44\x50\x5f\x50\x41\x53\x53\x3b\0\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x6d\x61\x70\x73\0\x78\x64\x70\0\0\x9f\
\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x2c\0\0\0\x40\0\0\0\0\0\0\0\
\x08\0\0\0\x9b\x01\0\0\x01\0\0\0\0\0\0\0\x1b\0\0\0\x10\0\0\0\x9b\x01\0\0\x02\0\
\0\0\0\0\0\0\x13\x01\0\0\x55\x01\0\0\x02\x7c\0\0\x20\0\0\0\x13\x01\0\0\x73\x01\
\0\0\x02\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x91\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xf8\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x1d\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x02\0\0\0\
\0\0\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x25\
\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x02\0\0\0\0\0\0\x30\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\0\0\0\x09\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x83\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x60\x02\0\0\0\0\0\0\xcf\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x30\x07\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct bootstrap_bpf *bootstrap_bpf::open(const struct bpf_object_open_opts *opts) { return bootstrap_bpf__open_opts(opts); }
struct bootstrap_bpf *bootstrap_bpf::open_and_load() { return bootstrap_bpf__open_and_load(); }
int bootstrap_bpf::load(struct bootstrap_bpf *skel) { return bootstrap_bpf__load(skel); }
int bootstrap_bpf::attach(struct bootstrap_bpf *skel) { return bootstrap_bpf__attach(skel); }
void bootstrap_bpf::detach(struct bootstrap_bpf *skel) { bootstrap_bpf__detach(skel); }
void bootstrap_bpf::destroy(struct bootstrap_bpf *skel) { bootstrap_bpf__destroy(skel); }
const void *bootstrap_bpf::elf_bytes(size_t *sz) { return bootstrap_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
bootstrap_bpf__assert(struct bootstrap_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->rodata->min_duration_ns) == 8, "unexpected size of 'min_duration_ns'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __BOOTSTRAP_BPF_SKEL_H__ */
